From f11729adb9990528a38df7c703bf589d58998c4f Mon Sep 17 00:00:00 2001
From: Jakub Jirutka <jakub@jirutka.cz>
Date: Wed, 24 Nov 2021 21:32:50 -0600
Subject: [PATCH] [PATCH] Fix linux_musl_base for native musl host

See https://github.com/rust-lang/rust/pull/40113
---
 compiler/rustc_target/src/spec/crt_objects.rs | 22 -------------------
 .../rustc_target/src/spec/linux_musl_base.rs  |  6 +----
 2 files changed, 1 insertion(+), 27 deletions(-)

--- a/compiler/rustc_target/src/spec/crt_objects.rs	2022-07-27 11:47:47.228244021 +0000
+++ b/compiler/rustc_target/src/spec/crt_objects.rs	2022-07-27 11:48:39.881596861 +0000
@@ -63,28 +63,6 @@
     ])
 }
 
-pub(super) fn pre_musl_fallback() -> CrtObjects {
-    new(&[
-        (LinkOutputKind::DynamicNoPicExe, &["crt1.o", "crti.o", "crtbegin.o"]),
-        (LinkOutputKind::DynamicPicExe, &["Scrt1.o", "crti.o", "crtbeginS.o"]),
-        (LinkOutputKind::StaticNoPicExe, &["crt1.o", "crti.o", "crtbegin.o"]),
-        (LinkOutputKind::StaticPicExe, &["rcrt1.o", "crti.o", "crtbeginS.o"]),
-        (LinkOutputKind::DynamicDylib, &["crti.o", "crtbeginS.o"]),
-        (LinkOutputKind::StaticDylib, &["crti.o", "crtbeginS.o"]),
-    ])
-}
-
-pub(super) fn post_musl_fallback() -> CrtObjects {
-    new(&[
-        (LinkOutputKind::DynamicNoPicExe, &["crtend.o", "crtn.o"]),
-        (LinkOutputKind::DynamicPicExe, &["crtendS.o", "crtn.o"]),
-        (LinkOutputKind::StaticNoPicExe, &["crtend.o", "crtn.o"]),
-        (LinkOutputKind::StaticPicExe, &["crtendS.o", "crtn.o"]),
-        (LinkOutputKind::DynamicDylib, &["crtendS.o", "crtn.o"]),
-        (LinkOutputKind::StaticDylib, &["crtendS.o", "crtn.o"]),
-    ])
-}
-
 pub(super) fn pre_mingw_fallback() -> CrtObjects {
     new(&[
         (LinkOutputKind::DynamicNoPicExe, &["crt2.o", "rsbegin.o"]),
--- a/compiler/rustc_target/src/spec/linux_musl_base.rs	2022-07-27 11:49:44.011620849 +0000
+++ b/compiler/rustc_target/src/spec/linux_musl_base.rs	2022-07-27 11:50:33.394972808 +0000
@@ -1,13 +1,9 @@
-use crate::spec::crt_objects::{self, CrtObjectsFallback};
 use crate::spec::TargetOptions;
 
 pub fn opts() -> TargetOptions {
     let mut base = super::linux_base::opts();
 
     base.env = "musl".into();
-    base.pre_link_objects_fallback = crt_objects::pre_musl_fallback();
-    base.post_link_objects_fallback = crt_objects::post_musl_fallback();
-    base.crt_objects_fallback = Some(CrtObjectsFallback::Musl);
 
     // These targets statically link libc by default
     base.crt_static_default = false;
